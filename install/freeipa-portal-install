#!/usr/bin/python

import logging
import os
import shutil
import sys
import argparse
import subprocess
import time
import pwd

from freeipa_community_portal import PACKAGE_DATA_DIR

LOGFILE = '/var/log/freeipa-portal-install.log'
PORTAL_CONF = '/etc/freeipa_community_portal.ini'
HTTPD_CONF = '/etc/httpd/conf.d/freeipa_community_portal.conf'
VAR_DIR = '/var/lib/freeipa_community_portal'
WEBSERVER_USER = pwd.getpwnam('apache')


logger = logging.getLogger()


# borrowing a bunch of code from the ipsilon installer
def openlogs():
    # if the logfile is actual a file
    if os.path.isfile(LOGFILE):
        try:
            # we're gonna move it and mark it with the time? i guess?
            created = '%s' % time.ctime(os.path.getctime(LOGFILE))
            shutil.move(LOGFILE, '%s.%s' % (LOGFILE, created))
        except IOError:
            # and if we can't? pftt. no problem
            pass

    # first, we set up the error logger
    try:
        # and tell it to use the logfile specified earlier
        lh = logging.FileHandler(LOGFILE)
    except IOError as e:
        # if we can't access that file, print an error message
        print >> sys.stderr, 'Unable to open %s (%s)' % (LOGFILE, str(e))
        # and log to stdout
        lh = logging.StreamHandler(sys.stderr)
    formatter = logging.Formatter('[%(asctime)s] %(message)s')
    lh.setFormatter(formatter)
    lh.setLevel(logging.DEBUG)
    logger.addHandler(lh)
    logger.propagate = False

    # then we set up the info logger, which just spews to stdout
    ch = logging.StreamHandler(sys.stdout)
    formatter = logging.Formatter('%(message)s')
    ch.setFormatter(formatter)
    ch.setLevel(logging.INFO)
    logger.addHandler(ch)


def parse_args():
    """parses the command line arguments passed in

    return: dict of arguments
    """
    parser = argparse.ArgumentParser(
        description='Install FreeIPA Community Portal')
    parser.add_argument('--version', action='version', version='%(prog)s 0.1')
    parser.add_argument(
        '--uninstall', action='store_true',
        help="Uninstall the server and all data")
    parser.add_argument(
        '--no-apache-conf', action='store_true',
        help="Do not generate the Apache config. "
             "Use if custom apache config will be used")

    return vars(parser.parse_args())


def install(opts):
    logger.info('Installation started')

    # first things first, if the user hasn't supplied a config file, then
    # give them one with sane defaults
    if not os.path.isfile(PORTAL_CONF):
        logger.warning('no portal config, creating one that might not work')
        conf_src = os.path.join(
            PACKAGE_DATA_DIR, 'conf', 'freeipa_community_portal.ini')
        shutil.copy(conf_src, PORTAL_CONF)

    # if the user has not explicitly requested, create the apache conf
    if not ('no-apache-conf' in opts and opts['no-apache-conf'] is True):
        logger.warning('generating apache config file!')
        shutil.copy(
            os.path.join(PACKAGE_DATA_DIR, 'conf', 'httpd.conf'),
            HTTPD_CONF)

    # create a /var/lib/freeipa-community-portal, if it does not exist
    # this is where our databases live
    if not os.path.isdir(VAR_DIR):
        os.makedirs(VAR_DIR, mode=0o750)
        # give apache this directory, so apache can write to it.
        os.chown(VAR_DIR, WEBSERVER_USER.pw_uid, WEBSERVER_USER.pw_gid)

    # create a key for the captcha
    with open(os.path.join(VAR_DIR, 'captcha.key'), 'wb') as fp:
        logger.info('writing captcha key file')
        os.fchmod(fp.fileno(), 0o600)
        os.fchown(fp.fileno(), WEBSERVER_USER.pw_uid, WEBSERVER_USER.pw_gid)
        fp.write(os.urandom(8))

    # set httpd_can_sendmail so that we send mail instead of crashing
    logger.info('setting httpd_can_sendmail SELinux bool')
    subprocess.call(['setsebool', '-P',  'httpd_can_sendmail', 'on'])


def uninstall(opts):
    logger.info('Uninstallation started')

    # remove the portal config
    if os.path.isfile(PORTAL_CONF):
        logger.info('deleting portal config ' + PORTAL_CONF)
        # TODO: get source conf file location
        os.remove(PORTAL_CONF)

    # delete the apache config
    logger.info('deleting HTTPD config')
    if os.path.isfile(HTTPD_CONF):
        os.remove(HTTPD_CONF)

    # delete /var/lib/freeipa-community-portal and everything in it
    # this is where our databases and key lived
    logger.info('deleting ' + VAR_DIR)
    if os.path.exists(VAR_DIR):
        shutil.rmtree(VAR_DIR)


def is_uninstall(opts):
    """ returns true if --uninstall is in the options """
    return opts.get('uninstall')

if __name__ == '__main__':
    opts = []
    out = 0
    openlogs()

    try:
        opts = parse_args()
        logger.setLevel(logging.DEBUG)

        logger.debug('Installation arguments:')
        for k in sorted(opts.iterkeys()):
            logger.debug('%s: %s', k, opts[k])

        if is_uninstall(opts):
            uninstall(opts)
        else:
            install(opts)

    except Exception as e:
        logger.exception(e)
        if is_uninstall(opts):
            logger.info('Uninstallation aborted')
        else:
            logger.info('Installation aborted')
        logger.info('See log file %s for details' % LOGFILE)
        out = 1
    except SystemExit:
        out = 1
        raise
    finally:
        if out == 0:
            if is_uninstall(opts):
                logger.info('Uninstallation complete')
            else:
                logger.info('Installation complete')
                logger.info('Please restart httpd to enable the portal')
        sys.exit(out)
